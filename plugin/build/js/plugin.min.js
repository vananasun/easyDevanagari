(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/**
 * This class is a way to simulate the Chrome message bus so that the plugin can
 * function on the website without the user having it installed, but also when
 * it is installed as extension.
 */

MessageBus = function(noplugin) {
    this.noplugin = noplugin;

    this.commandListeners = [];
    this.messageListeners = [];

    if (noplugin) {
        chrome = { runtime: {} };
        chrome.runtime.getURL = function(path) {
            return SIMPLYSANSKRIT_PATH + '/plugin/' + path;
        }
    }
}

MessageBus.prototype.addCommandListener = function(callback) {
    if (this.noplugin) {
        this.commandListeners.push(callback);
    } else {
        chrome.commands.onCommand.addListener(callback);
    }
}

MessageBus.prototype.addMessageListener = function(callback) {
    if (this.noplugin) {
        this.messageListeners.push(callback);
    } else {
        chrome.runtime.onMessage.addListener(callback);
    }
}

MessageBus.prototype.sendMessage = function(request, callback) {
    if (this.noplugin) {
        this.messageListeners.forEach(listener => {
            listener(request, null, callback);
        });
    } else {
        chrome.runtime.sendMessage(request, callback);
    }
}




module.exports = MessageBus;

},{}],2:[function(require,module,exports){
let MessageBus = require('message-bus.js');

noplugin = (typeof SIMPLYSANSKRIT_NOPLUGIN !== 'undefined');
g_messageBus = new MessageBus(noplugin);


romanShowed = false;

// Check for commands (hotkeys)
g_messageBus.addCommandListener(command => { if (noplugin) return;

    // Don't bother with any command but the toggle roman hotkey
    if (command !== "toggle-show-roman") return;

    // Toggle wheter roman is displayed
    romanShowed = !romanShowed;

    // Send message to content script in current tab that we toggle roman
    chrome.tabs.query({ currentWindow: true, active: true }, tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id,
            { action: 'show-roman', showRoman: romanShowed },
            function(response) {}
        );
    });

    return Promise.resolve('');

});

// Dictionary lookup handler
g_messageBus.addMessageListener((request, sender, sendResponse) => {
    if (request.action !== "lookupSanskrit") return;

    let requestDomain = noplugin ? 'word/' : 'https://sanskritdictionary.org/';
    let url = requestDomain + encodeURIComponent(request.word);
    fetch(url)
        .then(r => { return r.text() })
        .then(d => {
            sendResponse(d);
        })
        .catch(error => {/*console.warn(error)*/});

    return true; // will respond asynchronously
});

},{"message-bus.js":1}]},{},[2]);
